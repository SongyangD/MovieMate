{"ast":null,"code":"var _jsxFileName = \"/Users/susan/Documents/GitHub/Team168_Project/client/src/pages/Stats.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Container, Divider, Link } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\nimport LazyTable from '../components/LazyTable';\nimport SongCard from '../components/SongCard';\nimport DirectorsTable from '../components/DirectorsCard';\nimport ActressesTable from '../components/ActressCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function Stats() {\n  _s();\n  // We use the setState hook to persist information across renders (such as the result of our API calls)\n  const [songOfTheDay, setSongOfTheDay] = useState({});\n  const [selectedSongId, setSelectedSongId] = useState(null);\n  const [pageSize, setPageSize] = useState(10);\n\n  // The useEffect hook by default runs the provided callback after every render\n  // The second (optional) argument, [], is the dependency array which signals\n  // to the hook to only run the provided callback if the value of the dependency array\n  // changes from the previous render. In this case, an empty array means the callback\n  // will only run on the very first render.\n  useEffect(() => {\n    // Fetch request to get the song of the day. Fetch runs asynchronously.\n    // The .then() method is called when the fetch request is complete\n    // and proceeds to convert the result to a JSON which is finally placed in state.\n    fetch(`http://${config.server_host}:${config.server_port}/top_oscar_director`).then(res => res.json()).then(resJson => setSongOfTheDay(resJson));\n  }, []);\n\n  // Here, we define the columns of the \"Top Songs\" table. The songColumns variable is an array (in order)\n  // of objects with each object representing a column. Each object has a \"field\" property representing\n  // what data field to display from the raw data, \"headerName\" property representing the column label,\n  // and an optional renderCell property which given a row returns a custom JSX element to display in the cell.\n  const decadeColumns = [{\n    field: 'name',\n    headerName: 'Name'\n    //  renderCell: (row) => <Link onClick={() => setSelectedSongId(row.song_id)}>{row.title}</Link> // A Link component is used just for formatting purposes\n  }, {\n    field: 'num_nominations',\n    headerName: 'Nominations'\n    //  renderCell: (row) => <NavLink to={`/albums/${row.album_id}`}>{row.album}</NavLink> // A NavLink component is used to create a link to the album page\n  }, {\n    field: 'decade',\n    headerName: 'Decade'\n  }, {\n    field: 'avg_rating',\n    headerName: 'Average Movie Ratings'\n  }];\n  const topOscar = [{\n    field: 'title',\n    headerName: 'Title'\n  }, {\n    field: 'country',\n    headerName: 'Country'\n  }, {\n    field: 'year',\n    headerName: 'Year'\n  }, {\n    field: 'genre',\n    headerName: 'Genre'\n  }];\n  const oscarPpl = [{\n    field: 'name',\n    headerName: 'Name'\n  }, {\n    field: 'ceremony',\n    headerName: 'Ceremony'\n  }, {\n    field: 'movie_title',\n    headerName: 'Movie Title'\n  }];\n  const oscarActress = [{\n    field: 'name',\n    headerName: 'Name'\n  }, {\n    field: 'oscar_freq',\n    headerName: 'Oscar Movie Participation'\n  }, {\n    field: 'total_movies',\n    headerName: 'Total Movies Participation'\n  }, {\n    field: 'max_oscar_age',\n    headerName: 'Maximum Age at Oscar Nomination'\n  }, {\n    field: 'max_age',\n    headerName: 'Maximum Age of Movie Performance'\n  }, {\n    field: 'average_age',\n    headerName: 'Average Age of Movie Performance'\n  }, {\n    field: 'avg_rating',\n    headerName: 'Average Ratings of Oscar Movies'\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top 10 Oscar Directors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DirectorsTable, {\n      fetchUrl: 'top_oscar_director'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Ladies, Don't Let Anybody Tell You That You're Past Your Prime!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ActressesTable, {\n      fetchUrl: 'oscar_actress',\n      defaultPageSize: 5,\n      rowsPerPageOptions: [0, 5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Oscar Nominated Movies Participations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LazyTable, {\n      route: `http://${config.server_host}:${config.server_port}/stats`,\n      columns: decadeColumns,\n      defaultPageSize: pageSize,\n      rowsPerPageOptions: [5, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n_s(Stats, \"m1ChPiWk4kFh+JAKXjnH9Foja5I=\");\n_c = Stats;\n;\nvar _c;\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["useEffect","useState","Container","Divider","Link","NavLink","LazyTable","SongCard","DirectorsTable","ActressesTable","config","require","Stats","songOfTheDay","setSongOfTheDay","selectedSongId","setSelectedSongId","pageSize","setPageSize","fetch","server_host","server_port","then","res","json","resJson","decadeColumns","field","headerName","topOscar","oscarPpl","oscarActress"],"sources":["/Users/susan/Documents/GitHub/Team168_Project/client/src/pages/Stats.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Container, Divider, Link } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\n\nimport LazyTable from '../components/LazyTable';\nimport SongCard from '../components/SongCard';\nimport DirectorsTable from '../components/DirectorsCard';\nimport ActressesTable from '../components/ActressCard';\n\nconst config = require('../config.json');\n\nexport default function Stats() {\n    // We use the setState hook to persist information across renders (such as the result of our API calls)\n    const [songOfTheDay, setSongOfTheDay] = useState({});\n    const [selectedSongId, setSelectedSongId] = useState(null);\n    const [pageSize, setPageSize] = useState(10);\n\n    // The useEffect hook by default runs the provided callback after every render\n    // The second (optional) argument, [], is the dependency array which signals\n    // to the hook to only run the provided callback if the value of the dependency array\n    // changes from the previous render. In this case, an empty array means the callback\n    // will only run on the very first render.\n    useEffect(() => {\n        // Fetch request to get the song of the day. Fetch runs asynchronously.\n        // The .then() method is called when the fetch request is complete\n        // and proceeds to convert the result to a JSON which is finally placed in state.\n        fetch(`http://${config.server_host}:${config.server_port}/top_oscar_director`)\n            .then(res => res.json())\n            .then(resJson => setSongOfTheDay(resJson));\n    }, []);\n\n    // Here, we define the columns of the \"Top Songs\" table. The songColumns variable is an array (in order)\n    // of objects with each object representing a column. Each object has a \"field\" property representing\n    // what data field to display from the raw data, \"headerName\" property representing the column label,\n    // and an optional renderCell property which given a row returns a custom JSX element to display in the cell.\n    const decadeColumns = [\n        {\n            field: 'name',\n            headerName: 'Name',\n            //  renderCell: (row) => <Link onClick={() => setSelectedSongId(row.song_id)}>{row.title}</Link> // A Link component is used just for formatting purposes\n        },\n        {\n            field: 'num_nominations',\n            headerName: 'Nominations',\n            //  renderCell: (row) => <NavLink to={`/albums/${row.album_id}`}>{row.album}</NavLink> // A NavLink component is used to create a link to the album page\n        },\n        {\n            field: 'decade',\n            headerName: 'Decade'\n        },\n        {\n            field: 'avg_rating',\n            headerName: 'Average Movie Ratings'\n        },\n    ];\n\n    const topOscar = [\n        {\n            field: 'title',\n            headerName: 'Title'\n        },\n        {\n            field: 'country',\n            headerName: 'Country'\n        },\n        {\n            field: 'year',\n            headerName: 'Year'\n        },\n        {\n            field: 'genre',\n            headerName: 'Genre'\n        }\n    ]\n\n    const oscarPpl = [\n        {\n            field: 'name',\n            headerName: 'Name'\n        },\n        {\n            field: 'ceremony',\n            headerName: 'Ceremony'\n        },\n        {\n            field: 'movie_title',\n            headerName: 'Movie Title'\n        }\n    ]\n    const oscarActress = [\n        {\n            field: 'name',\n            headerName: 'Name'\n        },\n        {\n            field: 'oscar_freq',\n            headerName: 'Oscar Movie Participation'\n        },\n        {\n            field: 'total_movies',\n            headerName: 'Total Movies Participation'\n        },\n        {\n            field: 'max_oscar_age',\n            headerName: 'Maximum Age at Oscar Nomination'\n        },\n        {\n            field: 'max_age',\n            headerName: 'Maximum Age of Movie Performance'\n        },\n        {\n            field: 'average_age',\n            headerName: 'Average Age of Movie Performance'\n        },\n        {\n            field: 'avg_rating',\n            headerName: 'Average Ratings of Oscar Movies'\n        }\n    ]\n    return (\n        <Container>\n            <Divider />\n            <h2>Top 10 Oscar Directors</h2>\n            {/* <LazyTable route={ `http://${config.server_host}:${config.server_port}/top_oscar_director`} columns={directorColumns} defaultPageSize={5} rowsPerPageOptions={[5, 10]} /> */}\n            <DirectorsTable fetchUrl={'top_oscar_director'} />\n            <Divider />\n            <h2>Ladies, Don't Let Anybody Tell You That You're Past Your Prime!</h2>\n            <ActressesTable\n                fetchUrl={'oscar_actress'}\n                defaultPageSize={5}\n                rowsPerPageOptions={[0, 5]} />\n            <Divider />\n            <h2>Top Oscar Nominated Movies Participations</h2>\n            <LazyTable\n                route={`http://${config.server_host}:${config.server_port}/stats`}\n                columns={decadeColumns}\n                defaultPageSize={pageSize}\n                rowsPerPageOptions={[5, 10]}\n            />\n        </Container>\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}