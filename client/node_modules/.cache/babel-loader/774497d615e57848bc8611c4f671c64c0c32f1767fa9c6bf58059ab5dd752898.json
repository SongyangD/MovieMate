{"ast":null,"code":"var _jsxFileName = \"/Users/susan/Documents/GitHub/Team168_Project/client/src/pages/MoviesInfoPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport SongCard from '../components/SongCard';\nimport { formatDuration, formatReleaseDate } from '../helpers/formatter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function MovieInfoPage() {\n  _s();\n  // const { movie_id } = useParams();\n  const movie_id = 'tt0111161';\n\n  // const [songData, setSongData] = useState([{}]); // default should actually just be [], but empty object element added to avoid error in template code\n  const [movieData, setMovieData] = useState([]);\n  const [moviePeople, setMoviePeople] = useState([{}]);\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/movies/${movie_id}`).then(res => res.json()).then(resJson => {\n      console.log('Movie data:', resJson);\n      setMovieData(resJson);\n    });\n    fetch(`http://${config.server_host}:${config.server_port}/movie_people/${movie_id}`).then(res => res.json()).then(resJson => setMoviePeople(resJson));\n  }, [movie_id]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      justify: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movieData.poster_url,\n        alt: `${movieData.title} `,\n        style: {\n          marginTop: '40px',\n          marginRight: '40px',\n          marginBottom: '40px'\n        }\n      }, movieData.imdb_title_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            fontSize: 64\n          },\n          children: movieData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Released: \", formatReleaseDate(movieData.year)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n// return (\n//   <Container>\n//     <div style={{ margin: '2%' }}>\n//       <Card sx={styles.cardContainer}>\n//         <CardMedia\n//           component=\"img\"\n//           sx={styles.cardMedia}\n//           image={movieData.poster_url}\n//         />\n//         <CardContent sx={styles.cardContent}>\n//           <Typography gutterBottom variant=\"h5\" component=\"div\">\n//             <a href={`/movies/${movieData.imdb_title_id}`}>{movieData.title}</a>\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n//             Release year: {movieData.year}\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n//             Duration: {movieData.duration} minutes\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n//             Director: {movieData.director_name}\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n//             Oscar Nominations: {movieData.num_nominations}\n//           </Typography>\n//           <Typography variant=\"body2\" color=\"text.secondary\" style={{ marginTop: '16px' }}>\n//             {movieData.description}\n//           </Typography>\n//         </CardContent>\n//         {/* <CardActions>\n//       <Button size=\"small\">Share</Button>\n//       <Button size=\"small\">Learn More</Button>\n//     </CardActions> */}\n//       </Card>\n//     </div>\n//   </Container>\n// );\n_s(MovieInfoPage, \"c3qgrnnb8nSMIUrCNU9raT9sjJc=\");\n_c = MovieInfoPage;\nvar _c;\n$RefreshReg$(_c, \"MovieInfoPage\");","map":{"version":3,"names":["useEffect","useState","useParams","Container","Link","Stack","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","SongCard","formatDuration","formatReleaseDate","config","require","MovieInfoPage","movie_id","movieData","setMovieData","moviePeople","setMoviePeople","fetch","server_host","server_port","then","res","json","resJson","console","log","poster_url","title","marginTop","marginRight","marginBottom","imdb_title_id","fontSize","year"],"sources":["/Users/susan/Documents/GitHub/Team168_Project/client/src/pages/MoviesInfoPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport SongCard from '../components/SongCard';\nimport { formatDuration, formatReleaseDate } from '../helpers/formatter';\nconst config = require('../config.json');\n\nexport default function MovieInfoPage() {\n  // const { movie_id } = useParams();\n  const movie_id = 'tt0111161';\n\n  // const [songData, setSongData] = useState([{}]); // default should actually just be [], but empty object element added to avoid error in template code\n  const [movieData, setMovieData] = useState([]);\n  const [moviePeople, setMoviePeople] = useState([{}]);\n\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/movies/${movie_id}`)\n      .then(res => res.json())\n      .then(resJson => {\n        console.log('Movie data:', resJson);\n        setMovieData(resJson);\n      });\n\n    fetch(`http://${config.server_host}:${config.server_port}/movie_people/${movie_id}`)\n      .then(res => res.json())\n      .then(resJson => setMoviePeople(resJson));\n  }, [movie_id]);\n\n  return (\n    <Container>\n        {/* {selectedSongId && <SongCard songId={selectedSongId} handleClose={() => setSelectedSongId(null)} />} */}\n        <Stack direction='row' justify='center'>\n          <img\n            key={movieData.imdb_title_id}\n            src={movieData.poster_url}\n            alt={`${movieData.title} `}\n            style={{\n              marginTop: '40px',\n              marginRight: '40px',\n              marginBottom: '40px'\n            }} />\n          <Stack>\n            <h1 style={{ fontSize: 64 }}>{movieData.title}</h1>\n            <h2>Released: {formatReleaseDate(movieData.year)}</h2>\n          </Stack>\n        </Stack>\n      </Container>\n  );\n}\n  // return (\n  //   <Container>\n  //     <div style={{ margin: '2%' }}>\n  //       <Card sx={styles.cardContainer}>\n  //         <CardMedia\n  //           component=\"img\"\n  //           sx={styles.cardMedia}\n  //           image={movieData.poster_url}\n  //         />\n  //         <CardContent sx={styles.cardContent}>\n  //           <Typography gutterBottom variant=\"h5\" component=\"div\">\n  //             <a href={`/movies/${movieData.imdb_title_id}`}>{movieData.title}</a>\n  //           </Typography>\n  //           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n  //             Release year: {movieData.year}\n  //           </Typography>\n  //           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n  //             Duration: {movieData.duration} minutes\n  //           </Typography>\n  //           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n  //             Director: {movieData.director_name}\n  //           </Typography>\n  //           <Typography variant=\"body2\" color=\"text.primary\" sx={{ fontSize: 16 }}>\n  //             Oscar Nominations: {movieData.num_nominations}\n  //           </Typography>\n  //           <Typography variant=\"body2\" color=\"text.secondary\" style={{ marginTop: '16px' }}>\n  //             {movieData.description}\n  //           </Typography>\n  //         </CardContent>\n  //         {/* <CardActions>\n  //       <Button size=\"small\">Share</Button>\n  //       <Button size=\"small\">Learn More</Button>\n  //     </CardActions> */}\n  //       </Card>\n  //     </div>\n  //   </Container>\n  // );"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,cAAc,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAExH,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,sBAAsB;AAAC;AACzE,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAExC,eAAe,SAASC,aAAa,GAAG;EAAA;EACtC;EACA,MAAMC,QAAQ,GAAG,WAAW;;EAE5B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACduB,KAAK,CAAE,UAASR,MAAM,CAACS,WAAY,IAAGT,MAAM,CAACU,WAAY,WAAUP,QAAS,EAAC,CAAC,CAC3EQ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,OAAO,IAAI;MACfC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,OAAO,CAAC;MACnCT,YAAY,CAACS,OAAO,CAAC;IACvB,CAAC,CAAC;IAEJN,KAAK,CAAE,UAASR,MAAM,CAACS,WAAY,IAAGT,MAAM,CAACU,WAAY,iBAAgBP,QAAS,EAAC,CAAC,CACjFQ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,OAAO,IAAIP,cAAc,CAACO,OAAO,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;EAEd,oBACE,QAAC,SAAS;IAAA,uBAEN,QAAC,KAAK;MAAC,SAAS,EAAC,KAAK;MAAC,OAAO,EAAC,QAAQ;MAAA,wBACrC;QAEE,GAAG,EAAEC,SAAS,CAACa,UAAW;QAC1B,GAAG,EAAG,GAAEb,SAAS,CAACc,KAAM,GAAG;QAC3B,KAAK,EAAE;UACLC,SAAS,EAAE,MAAM;UACjBC,WAAW,EAAE,MAAM;UACnBC,YAAY,EAAE;QAChB;MAAE,GAPGjB,SAAS,CAACkB,aAAa;QAAA;QAAA;QAAA;MAAA,QAOvB,eACP,QAAC,KAAK;QAAA,wBACJ;UAAI,KAAK,EAAE;YAAEC,QAAQ,EAAE;UAAG,CAAE;UAAA,UAAEnB,SAAS,CAACc;QAAK;UAAA;UAAA;UAAA;QAAA,QAAM,eACnD;UAAA,WAAI,YAAU,EAACnB,iBAAiB,CAACK,SAAS,CAACoB,IAAI,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAChD;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACE;AAElB;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,GA9EsBtB,aAAa;AAAA,KAAbA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}